# -*- coding: utf-8 -*-
"""Predective Analysis Using Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HxKpeXJj4An6P_L08nDe8MPhOqDjzrMV
"""

# House Price Prediction using "Linear Regression".
# Importing required libraries.
import pandas as pd                                               # for handling data,load datasets, and processes them.
import matplotlib.pyplot as plt                                   # for visualization (like plotting graphs).
from sklearn.model_selection import train_test_split              # To split the data into training and tesing sets.
from sklearn.linear_model import LinearRegression                 # MachineLearning  algorithm used to predict house prices.
from sklearn.metrics import mean_squared_error                    # Used to Measures how well the model performed.
# Loading the dataset
df = pd.read_csv("house_price_sample.csv")
df.head(11)                                                       # used to  show the top 11 rows.
print (df.isnull().sum())                                         # check for missing values.
# Split the data into feature(x) and target(y), "features" are the inputs used to predict the target.
x = df[["LotArea","OverallQual","YearBuilt","GrLivArea","GarageCars"]] # features.
y = df["SalePrice"]                                                    # target.
# Split the Data into Training and Testing sets
from sklearn.model_selection import train_test_split              # this imports the train_test_split function.
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, random_state=1)  # split the data "80% training and 20% testing".
# Import,Create and Train the model (Linear Regression)
from sklearn.linear_model import LinearRegression                 # import LinearRegression Class from the sklearn.linear_model library.
model = LinearRegression()                                        # creating a model.
model.fit(x_train,y_train)                                        # Training the model.
#  Checked Model's Parameters (How It Learns)
print("Model Coefficient:",model.coef_)                           # model.coef shows if "LotArea" increase how much "Sales_Price" increase.
print("Model Intercept:",model.intercept_)                        # model.intercept shows base value (like fixed starting price when all features are 0).
# prediction the House Prices on Test Data
y_pred = model.predict(x_test)                                    # "x_test" contain the features for the 20% test data.
comparison =pd.DataFrame({"Actual":y_test,"Predicted":y_pred})    # Creates a new table to showing comparision between actual and predicted values.
print (comparison.head())                                         # Display the row of "Actual vs predicted".
# visualize Actual vs Predicted prices
plt.scatter(y_test,y_pred,color="blue")                           # Each blue dot shows how far the model's prediction is from the actual price.
# The red line represent perfect prediction i.e : prediction = actual.
plt.plot([min(y_test),max(y_test)],[min(y_test),max(y_test)],color="red",linewidth=2)
plt.title("Actual VS Predicted price")                            # Adds title to the top of chart.
# Labels the x-axis (actual prices) and y-axis (predicted prices)
plt.xlabel("Actual prices")
plt.ylabel("Predicted prices")
plt.grid(True)                                                    # Adds a grid in the background.
# Calculate Mean-Square error
mse = mean_squared_error(y_test,y_pred)
print("Mean square error:",mse)
# Predict New data
new_house=[[8000,8,2010,1800,2]]                                  # Assigned new data.
predicted_price=model.predict(new_house)                          # Using the trained model to predict the price of a new house.
# Print the predicted house price in dollars with comma separators and 2 decimal places.
print(f"the predicted price for the new house is:${predicted_price[0]:,.2f}")
# Again to see the data
df = pd.read_csv("house_price_sample.csv")
df.head(11)